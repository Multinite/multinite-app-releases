name: Clone Releases
on:
  workflow_dispatch:
  schedule:
    - cron: "0 */12 * * *" # Every 12 hours

jobs:
  copy-releases:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Copy Release Assets
        env:
          SRC_REPO_TOKEN: ${{ secrets.TOKEN }} # Token with access to private repo
          DEST_REPO_TOKEN: ${{ secrets.TOKEN }} # Token for this public repo
          GH_TOKEN: ${{ secrets.TOKEN }}
        run: |
          # Enable debug output
          set -x

          echo "Fetching latest release info..."
          RELEASE_INFO=$(curl -s -H "Authorization: token ${SRC_REPO_TOKEN}" \
            "https://api.github.com/repos/multinite/multinite-app/releases/latest")

          # Check if we got release info
          echo "Release info received:"
          echo $RELEASE_INFO | jq '.'

          # Get version, name, and body
          VERSION=$(echo $RELEASE_INFO | jq -r .tag_name)
          RELEASE_NAME=$(echo $RELEASE_INFO | jq -r .name)
          RELEASE_BODY=$(echo $RELEASE_INFO | jq -r .body)

          echo "Latest version: $VERSION"
          echo "Release name: $RELEASE_NAME"

          # Create directory for assets
          mkdir -p assets
          cd assets

          # Download assets with proper names
          echo $RELEASE_INFO | jq -r '.assets[] | select(.name | test("\\.(msi|exe|dmg|deb|rpm|AppImage|json)$")) | [.name, .url] | @tsv' | while IFS=$'\t' read -r NAME URL; do
            echo "Downloading $NAME from $URL"
            curl -L -H "Authorization: token ${SRC_REPO_TOKEN}" \
              -H "Accept: application/octet-stream" \
              "$URL" --output "$NAME"
          done

          # List downloaded files
          echo "Downloaded files:"
          ls -la

          # Create new release with same name and body
          echo "Creating release $VERSION"
          echo "$RELEASE_BODY" > release_notes.md
          gh release create "$VERSION" * \
            --title "$RELEASE_NAME" \
            --notes-file release_notes.md
